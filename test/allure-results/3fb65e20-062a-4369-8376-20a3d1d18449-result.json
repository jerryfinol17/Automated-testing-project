{"name": "test_remove_single_item[chrome-bike_light-1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x103c333+65459]\n\tGetHandleVerifier [0x0x103c374+65524]\n\t(No symbol) [0x0xe5d973]\n\t(No symbol) [0x0xea76e7]\n\t(No symbol) [0x0xea7a8b]\n\t(No symbol) [0x0xeedea2]\n\t(No symbol) [0x0xec9e44]\n\t(No symbol) [0x0xeeb606]\n\t(No symbol) [0x0xec9bf6]\n\t(No symbol) [0x0xe9b38e]\n\t(No symbol) [0x0xe9c274]\n\tGetHandleVerifier [0x0x12beda3+2697763]\n\tGetHandleVerifier [0x0x12b9ec7+2677575]\n\tGetHandleVerifier [0x0x1064194+228884]\n\tGetHandleVerifier [0x0x10549f8+165496]\n\tGetHandleVerifier [0x0x105b18d+192013]\n\tGetHandleVerifier [0x0x10447d8+99416]\n\tGetHandleVerifier [0x0x1044972+99826]\n\tGetHandleVerifier [0x0x102ebea+10346]\n\tBaseThreadInitThunk [0x0x75dd5d49+25]\n\tRtlInitializeExceptionChain [0x0x7738d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7738d661+561]", "trace": "browser_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"097590262e5a13fff64e85c340f16087\")>\n\n    @pytest.fixture(scope=\"function\")\n    def cart_page_with_items(browser_driver):\n        login_page = LoginPage(browser_driver)\n        login_page.open_page()\n        login_page.insert_user_name(config_for_login_page.CREDENTIALS[\"standard_user\"][\"username\"])\n        login_page.insert_password(config_for_login_page.CREDENTIALS[\"standard_user\"][\"password\"])\n        login_page.click_login_button()\n        assert login_page.driver.current_url == \"https://www.saucedemo.com/inventory.html\"\n        inventory = InventoryPage(browser_driver)\n>       inventory.add_multiple_products([\"bike_light\", \"backpack\"])\n\ntest_cart.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\inventory_page.py:30: in add_multiple_products\n    self.add_product(product)\n..\\pages\\inventory_page.py:23: in add_product\n    self.wait.until(EC.visibility_of_element_located(remove_selector))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"097590262e5a13fff64e85c340f16087\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001F52A987420>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x103c333+65459]\nE       \tGetHandleVerifier [0x0x103c374+65524]\nE       \t(No symbol) [0x0xe5d973]\nE       \t(No symbol) [0x0xea76e7]\nE       \t(No symbol) [0x0xea7a8b]\nE       \t(No symbol) [0x0xeedea2]\nE       \t(No symbol) [0x0xec9e44]\nE       \t(No symbol) [0x0xeeb606]\nE       \t(No symbol) [0x0xec9bf6]\nE       \t(No symbol) [0x0xe9b38e]\nE       \t(No symbol) [0x0xe9c274]\nE       \tGetHandleVerifier [0x0x12beda3+2697763]\nE       \tGetHandleVerifier [0x0x12b9ec7+2677575]\nE       \tGetHandleVerifier [0x0x1064194+228884]\nE       \tGetHandleVerifier [0x0x10549f8+165496]\nE       \tGetHandleVerifier [0x0x105b18d+192013]\nE       \tGetHandleVerifier [0x0x10447d8+99416]\nE       \tGetHandleVerifier [0x0x1044972+99826]\nE       \tGetHandleVerifier [0x0x102ebea+10346]\nE       \tBaseThreadInitThunk [0x0x75dd5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7738d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7738d661+561]\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "parameters": [{"name": "browser_driver", "value": "'chrome'"}, {"name": "product_key", "value": "'bike_light'"}, {"name": "expected_badge_after", "value": "'1'"}], "start": 1759173762101, "stop": 1759173762101, "uuid": "945cf8bc-af1a-489d-b88b-b03f8131a0cf", "historyId": "26636815b4c6f78325893c8032709204", "testCaseId": "487acd8278dd10de14ba17e85a6c4c56", "fullName": "test_cart#test_remove_single_item", "labels": [{"name": "suite", "value": "test_cart"}, {"name": "host", "value": "Jerry"}, {"name": "thread", "value": "27308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cart"}], "titlePath": ["test_cart.py"]}